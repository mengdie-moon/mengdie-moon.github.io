<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uniapp登录注册页面开发实战(前端篇)</title>
      <link href="/2025/04/21/uniapp-login-register/"/>
      <url>/2025/04/21/uniapp-login-register/</url>
      
        <content type="html"><![CDATA[<h2 id="一、页面布局与表单验证"><a href="#一、页面布局与表单验证" class="headerlink" title="一、页面布局与表单验证"></a>一、页面布局与表单验证</h2><p>本节将详细介绍登录注册页面的基础布局搭建，以及如何利用 <code>uni-forms</code> 和 <code>uni-easyinput</code> 组件实现强大的表单验证功能。我们将重点关注手机号和密码的校验规则设计，确保用户输入的数据符合安全和规范要求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;uni-forms ref=&quot;form&quot;&gt;</span><br><span class="line">    &lt;!-- 手机号输入 --&gt;</span><br><span class="line">    &lt;uni-easyinput </span><br><span class="line">      v-model=&quot;formData.phone&quot;</span><br><span class="line">      :trim=&quot;true&quot;</span><br><span class="line">      placeholder=&quot;请输入手机号&quot;</span><br><span class="line">      :rules=&quot;phoneRules&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 密码强度校验 --&gt;</span><br><span class="line">    &lt;uni-easyinput</span><br><span class="line">      type=&quot;password&quot;</span><br><span class="line">      v-model=&quot;formData.password&quot;</span><br><span class="line">      placeholder=&quot;请输入密码&quot;</span><br><span class="line">      :rules=&quot;passwordRules&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/uni-forms&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const formData = reactive(&#123;</span><br><span class="line">  phone: &#x27;&#x27;,</span><br><span class="line">  password: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">首先通过 `checkIsSupportBiometricAuth` 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 `startBiometricAuth` 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 `token` 或确认用户身份。</span><br><span class="line"></span><br><span class="line">\n**表单验证规则设计说明：**</span><br><span class="line">// 1. 手机号校验采用工信部最新号段正则（2023），覆盖13-19开头的主流号码</span><br><span class="line">// 2. 密码规则要求8位以上且必须包含字母+数字的组合</span><br><span class="line">// 3. 使用uniapp自带的表单校验组件，保持跨平台一致性</span><br><span class="line"></span><br><span class="line">// 手机号验证规则</span><br><span class="line">const phoneRules = &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    required: true,</span><br><span class="line">    errorMessage: &#x27;请输入手机号&#x27;,</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    pattern: /^1[3-9]\d&#123;9&#125;$/,</span><br><span class="line">    errorMessage: &#x27;手机号格式错误&#x27;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 密码强度规则（至少包含字母+数字）</span><br><span class="line">const passwordRules = &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    minLength: 8,</span><br><span class="line">    errorMessage: &#x27;密码至少8位&#x27;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    validateFunction: (val) =&gt; &#123;</span><br><span class="line">      return /[a-zA-Z]/.test(val) &amp;&amp; /\d/.test(val)</span><br><span class="line">    &#125;,</span><br><span class="line">    errorMessage: &#x27;需包含字母和数字&#x27;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">在 `handleSubmit` 函数开始时，检查 `isSubmitting` 状态。如果为 `true`，则直接返回，阻止重复提交。在 `try...finally` 块中，确保无论提交成功还是失败，`isSubmitting` 状态最终都会被重置为 `false`。</span><br></pre></td></tr></table></figure><p>通过上述代码，我们定义了手机号和密码的输入框，并配置了相应的验证规则。<code>uni-forms</code> 组件负责管理整个表单的状态和验证逻辑，而 <code>uni-easyinput</code> 则提供了便捷的输入和校验展示功能。</p><h2 id="二、状态管理与接口安全"><a href="#二、状态管理与接口安全" class="headerlink" title="二、状态管理与接口安全"></a>二、状态管理与接口安全</h2><p>在登录注册流程中，管理用户登录状态和保障接口通信安全至关重要。本节将探讨如何使用 Vuex 进行全局状态管理，以及如何通过 AES 加密增强接口请求的安全性。</p><h3 id="1-Vuex状态管理"><a href="#1-Vuex状态管理" class="headerlink" title="1. Vuex状态管理"></a>1. Vuex状态管理</h3><p>为了在应用的多个页面间共享用户的登录状态（如 <code>token</code>），我们选用 Vuex 作为全局状态管理方案。这有助于维护应用状态的一致性，并简化跨组件通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\n**状态管理技术选型说明：**</span><br><span class="line"><span class="comment">// 1. 采用Vuex进行全局状态管理，方便多页面共享登录状态</span></span><br><span class="line"><span class="comment">// 2. 配合uni-app的持久化存储方案，实现token自动缓存</span></span><br><span class="line"><span class="comment">// 3. 使用命名空间避免与其他模块冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store/user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">SET_TOKEN</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">      state.<span class="property">token</span> = token</span><br><span class="line">      uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 SCSS 代码展示了如何为不同平台编写特定的样式。通用样式定义在 <code>.container</code> 类中。通过 <code>@media (platform: mp-weixin)</code> 和 <code>@media (platform: h5)</code>，我们可以分别为微信小程序和 H5 端设置不同的内边距或布局约束，实现精细化的样式控制。</p><p>上述代码展示了 <code>user</code> 模块的基本结构。<code>state</code> 中存储了从本地缓存读取的 <code>token</code>，<code>mutations</code> 中的 <code>SET_TOKEN</code> 方法用于更新 <code>token</code> 并将其同步到本地存储，确保登录状态的持久化。</p><h3 id="2-接口请求加密"><a href="#2-接口请求加密" class="headerlink" title="2. 接口请求加密"></a>2. 接口请求加密</h3><p>为了保护敏感数据在传输过程中的安全，对请求参数进行加密是一种常见的做法。这里我们采用 AES 加密算法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/request.js</span></span><br><span class="line">\n**接口安全实现要点：**</span><br><span class="line"><span class="comment">// 1. 使用AES-ECB加密模式保障基础数据安全</span></span><br><span class="line"><span class="comment">// 2. 密钥应通过服务端下发动态生成，避免硬编码</span></span><br><span class="line"><span class="comment">// 3. 配合HTTPS传输保障通道安全</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = crypto.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;your-secret-key&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> crypto.<span class="property">AES</span>.<span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), key, &#123;</span><br><span class="line">    <span class="attr">mode</span>: crypto.<span class="property">mode</span>.<span class="property">ECB</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**注意：** 上述代码中的 <span class="string">`&#x27;your-secret-key&#x27;`</span> 仅为示例，实际项目中密钥**绝不能**硬编码在前端代码中。推荐的做法是通过安全的机制（如首次握手时由后端动态下发）获取密钥，并妥善保管。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 SCSS 代码展示了如何为不同平台编写特定的样式。通用样式定义在 <code>.container</code> 类中。通过 <code>@media (platform: mp-weixin)</code> 和 <code>@media (platform: h5)</code>，我们可以分别为微信小程序和 H5 端设置不同的内边距或布局约束，实现精细化的样式控制。</p><p>上述代码展示了 <code>user</code> 模块的基本结构。<code>state</code> 中存储了从本地缓存读取的 <code>token</code>，<code>mutations</code> 中的 <code>SET_TOKEN</code> 方法用于更新 <code>token</code> 并将其同步到本地存储，确保登录状态的持久化。</p><h2 id="三、跨端样式适配方案"><a href="#三、跨端样式适配方案" class="headerlink" title="三、跨端样式适配方案"></a>三、跨端样式适配方案</h2><p>UniApp 的核心优势之一是跨端开发。为了确保应用在不同平台（如微信小程序、H5）上都能呈现良好的视觉效果，我们需要编写能够自适应的样式。本节将展示如何使用 SCSS 和媒体查询实现跨端样式适配。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通用样式 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30</span>rpx;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 小程序特定样式 */</span></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">platform</span>: mp-weixin) &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* H5端适配 */</span></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">platform</span>: h5) &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 SCSS 代码展示了如何为不同平台编写特定的样式。通用样式定义在 <code>.container</code> 类中。通过 <code>@media (platform: mp-weixin)</code> 和 <code>@media (platform: h5)</code>，我们可以分别为微信小程序和 H5 端设置不同的内边距或布局约束，实现精细化的样式控制。</p><p>上述代码展示了 <code>user</code> 模块的基本结构。<code>state</code> 中存储了从本地缓存读取的 <code>token</code>，<code>mutations</code> 中的 <code>SET_TOKEN</code> 方法用于更新 <code>token</code> 并将其同步到本地存储，确保登录状态的持久化。</p><h2 id="四、进阶功能实现"><a href="#四、进阶功能实现" class="headerlink" title="四、进阶功能实现"></a>四、进阶功能实现</h2><p>除了基本的账号密码登录，现代应用通常还提供更便捷的登录方式，如第三方登录和生物识别登录。本节将介绍如何在 UniApp 中集成这些进阶功能。</p><h3 id="3-第三方登录集成"><a href="#3-第三方登录集成" class="headerlink" title="3. 第三方登录集成"></a>3. 第三方登录集成</h3><p>集成微信、Apple 等第三方平台登录可以简化用户的注册登录流程，提升用户体验。以下代码演示了如何调用 UniApp 的 API 实现微信和 Apple 登录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;oauth-buttons&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;wechatLogin&quot; class=&quot;btn-wechat&quot;&gt;</span><br><span class="line">    &lt;uni-icons type=&quot;weixin&quot; size=&quot;20&quot;&gt;&lt;/uni-icons&gt;微信登录</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;button </span><br><span class="line">    v-if=&quot;isIOS&quot;</span><br><span class="line">    @click=&quot;appleLogin&quot;</span><br><span class="line">    class=&quot;btn-apple&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;uni-icons type=&quot;apple&quot; size=&quot;20&quot;&gt;&lt;/uni-icons&gt;Apple登录</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const isIOS = ref(uni.getSystemInfoSync().platform === &#x27;ios&#x27;)</span><br><span class="line"></span><br><span class="line">const wechatLogin = async () =&gt; &#123;</span><br><span class="line">  const [err, res] = await uni.login(&#123; provider: &#x27;weixin&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 `checkIsSupportBiometricAuth` 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 `startBiometricAuth` 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 `token` 或确认用户身份。</span><br><span class="line">  if(res?.code) &#123;</span><br><span class="line">    // 发送code到后端换取token</span><br><span class="line">    const &#123; data &#125; = await uni.request(&#123;</span><br><span class="line">      url: &#x27;/api/oauth/wechat&#x27;,</span><br><span class="line">      method: &#x27;POST&#x27;,</span><br><span class="line">      data: &#123; code: res.code &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 `checkIsSupportBiometricAuth` 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 `startBiometricAuth` 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 `token` 或确认用户身份。</span><br><span class="line">    store.commit(&#x27;user/SET_TOKEN&#x27;, data.token)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const appleLogin = async () =&gt; &#123;</span><br><span class="line">  const [err, res] = await uni.login(&#123; provider: &#x27;apple&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 `checkIsSupportBiometricAuth` 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 `startBiometricAuth` 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 `token` 或确认用户身份。</span><br><span class="line">  // 处理Apple登录逻辑...</span><br><span class="line">  // 注意：Apple登录通常需要更复杂的配置和后端验证流程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在微信登录逻辑中，我们首先调用 `uni.login` 获取 `code`，然后将 `code` 发送到后端服务换取应用自身的 `token`，最后通过 Vuex 更新全局登录状态。Apple 登录的流程类似，但具体实现细节会有所不同。</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们定义了手机号和密码的输入框，并配置了相应的验证规则。<code>uni-forms</code> 组件负责管理整个表单的状态和验证逻辑，而 <code>uni-easyinput</code> 则提供了便捷的输入和校验展示功能。</p><h3 id="4-生物识别登录"><a href="#4-生物识别登录" class="headerlink" title="4. 生物识别登录"></a>4. 生物识别登录</h3><p>利用设备自带的生物识别功能（如指纹、面容 ID）进行登录，可以提供极高的安全性与便捷性。以下代码展示了如何检查设备支持情况并启动生物识别验证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查生物识别支持</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkBiometric</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> uni.<span class="title function_">checkIsSupportBiometricAuth</span>(&#123;</span><br><span class="line">    <span class="attr">checkAuthMode</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">isSupport</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动生物识别验证</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">startBiometricAuth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  uni.<span class="title function_">startBiometricAuth</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 调用后端接口验证生物特征</span></span><br><span class="line">      <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">refreshTokenWithBiometric</span>()</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&#x27;user/SET_TOKEN&#x27;</span>, token)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      uni.<span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;验证失败&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 SCSS 代码展示了如何为不同平台编写特定的样式。通用样式定义在 <code>.container</code> 类中。通过 <code>@media (platform: mp-weixin)</code> 和 <code>@media (platform: h5)</code>，我们可以分别为微信小程序和 H5 端设置不同的内边距或布局约束，实现精细化的样式控制。</p><p>上述代码展示了 <code>user</code> 模块的基本结构。<code>state</code> 中存储了从本地缓存读取的 <code>token</code>，<code>mutations</code> 中的 <code>SET_TOKEN</code> 方法用于更新 <code>token</code> 并将其同步到本地存储，确保登录状态的持久化。</p><h2 id="五、用户体验优化"><a href="#五、用户体验优化" class="headerlink" title="五、用户体验优化"></a>五、用户体验优化</h2><p>良好的用户体验是应用成功的关键。在登录注册场景下，我们可以通过实现登录态刷新、表单防抖&#x2F;防重、验证码流程等方式来优化用户体验。本节将探讨这些优化技巧的具体实现。</p><h3 id="1-登录态刷新机制"><a href="#1-登录态刷新机制" class="headerlink" title="1. 登录态刷新机制"></a>1. 登录态刷新机制</h3><p>为了避免用户频繁重新登录，通常会采用 <code>access_token</code> 和 <code>refresh_token</code> 的机制。当 <code>access_token</code> 过期时，可以使用 <code>refresh_token</code> 静默地获取新的 <code>access_token</code>，对用户透明。这通常在请求拦截器中实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/request.js 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">  <span class="keyword">async</span> error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">config</span>.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/refresh&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newToken = <span class="keyword">await</span> <span class="title function_">refreshToken</span>()</span><br><span class="line">      <span class="keyword">if</span> (newToken) &#123;</span><br><span class="line">        error.<span class="property">config</span>.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;newToken&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> instance.<span class="title function_">request</span>(error.<span class="property">config</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">refreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> refreshToken = uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;refresh_token&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/auth/refresh&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">refresh_token</span>: refreshToken &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">首先通过 <span class="string">`checkIsSupportBiometricAuth`</span> 检查设备是否支持生物识别以及是否已录入生物信息。如果支持，则调用 <span class="string">`startBiometricAuth`</span> 启动验证流程。验证成功后，通常需要调用后端接口，使用生物特征凭证换取新的 <span class="string">`token`</span> 或确认用户身份。</span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;user/SET_TOKEN&#x27;</span>, data.<span class="property">access_token</span>)</span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">access_token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在 <span class="string">`axios`</span> 或 <span class="string">`uni.request`</span> 的响应拦截器中，当捕获到 <span class="number">401</span> 未授权错误时，尝试调用 <span class="string">`refreshToken`</span> 函数。该函数使用本地存储的 <span class="string">`refresh_token`</span> 向后端请求新的 <span class="string">`access_token`</span>。获取成功后，更新全局 <span class="string">`token`</span> 和本地存储，并使用新 <span class="string">`token`</span> 重发失败的请求。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 SCSS 代码展示了如何为不同平台编写特定的样式。通用样式定义在 <code>.container</code> 类中。通过 <code>@media (platform: mp-weixin)</code> 和 <code>@media (platform: h5)</code>，我们可以分别为微信小程序和 H5 端设置不同的内边距或布局约束，实现精细化的样式控制。</p><p>上述代码展示了 <code>user</code> 模块的基本结构。<code>state</code> 中存储了从本地缓存读取的 <code>token</code>，<code>mutations</code> 中的 <code>SET_TOKEN</code> 方法用于更新 <code>token</code> 并将其同步到本地存储，确保登录状态的持久化。</p><h3 id="2-表单防抖优化"><a href="#2-表单防抖优化" class="headerlink" title="2. 表单防抖优化"></a>2. 表单防抖优化</h3><p>对于需要进行网络请求的表单提交操作，使用防抖（Debounce）可以防止用户在短时间内连续触发提交，减少不必要的请求，优化性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; debounce &#125; from &#x27;lodash-es&#x27;</span><br><span class="line"></span><br><span class="line">const handleSubmit = debounce(async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    await form.value.validate()</span><br><span class="line">    // 提交逻辑...</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    handleError(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000) // 设置1秒的防抖延迟</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">这里使用了 `lodash-es` 库的 `debounce` 函数，将实际的提交逻辑包装起来。只有当用户停止触发提交操作 1 秒后，`handleSubmit` 函数才会真正执行。</span><br></pre></td></tr></table></figure><p>通过上述代码，我们定义了手机号和密码的输入框，并配置了相应的验证规则。<code>uni-forms</code> 组件负责管理整个表单的状态和验证逻辑，而 <code>uni-easyinput</code> 则提供了便捷的输入和校验展示功能。</p><h3 id="1-防重复提交"><a href="#1-防重复提交" class="headerlink" title="1. 防重复提交"></a>1. 防重复提交</h3><p>除了防抖，还可以通过设置一个状态标记来防止用户在请求处理期间重复点击提交按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const isSubmitting = ref(false)</span><br><span class="line"></span><br><span class="line">const handleSubmit = async () =&gt; &#123;</span><br><span class="line">  if (isSubmitting.value) return</span><br><span class="line">  </span><br><span class="line">  try &#123;</span><br><span class="line">    isSubmitting.value = true</span><br><span class="line">    await submitForm()</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    isSubmitting.value = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">在 `handleSubmit` 函数开始时，检查 `isSubmitting` 状态。如果为 `true`，则直接返回，阻止重复提交。在 `try...finally` 块中，确保无论提交成功还是失败，`isSubmitting` 状态最终都会被重置为 `false`。</span><br></pre></td></tr></table></figure><p>通过上述代码，我们定义了手机号和密码的输入框，并配置了相应的验证规则。<code>uni-forms</code> 组件负责管理整个表单的状态和验证逻辑，而 <code>uni-easyinput</code> 则提供了便捷的输入和校验展示功能。</p><h3 id="2-验证码登录流程"><a href="#2-验证码登录流程" class="headerlink" title="2. 验证码登录流程"></a>2. 验证码登录流程</h3><p>短信验证码登录是常见的身份验证方式。实现时需要考虑发送频率限制和用户界面反馈。<br>\n<strong>验证码流程设计说明：</strong><br>&#x2F;&#x2F; 1. 60秒倒计时防止重复请求<br>&#x2F;&#x2F; 2. 按钮状态与倒计时联动<br>&#x2F;&#x2F; 3. 实际开发需对接短信服务平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class=&quot;code-wrapper&quot;&gt;</span><br><span class="line">  &lt;uni-easyinput v-model=&quot;smsCode&quot; placeholder=&quot;验证码&quot; /&gt;</span><br><span class="line">  &lt;button </span><br><span class="line">    :disabled=&quot;countdown &gt; 0&quot;</span><br><span class="line">    @click=&quot;getSMSCode&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; countdown ? `$&#123;countdown&#125;s后重发` : &#x27;获取验证码&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const countdown = ref(0)</span><br><span class="line"></span><br><span class="line">const getSMSCode = () =&gt; &#123;</span><br><span class="line">  countdown.value = 60</span><br><span class="line">  const timer = setInterval(() =&gt; &#123;</span><br><span class="line">    if (countdown.value &lt;= 0) &#123;</span><br><span class="line">      clearInterval(timer)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    countdown.value--</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">  // 此处应调用后端接口发送短信验证码</span><br><span class="line">  // uni.request(&#123; url: &#x27;/api/sms/send&#x27;, data: &#123; phone: formData.phone &#125; ... &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">点击“获取验证码”按钮后，启动一个 60 秒的倒计时，并禁用按钮。倒计时期间，按钮显示剩余秒数。倒计时结束后，按钮恢复可用状态。实际应用中，还需要在此处调用后端接口来真正发送短信验证码。</span><br><span class="line"></span><br><span class="line">在 `handleSubmit` 函数开始时，检查 `isSubmitting` 状态。如果为 `true`，则直接返回，阻止重复提交。在 `try...finally` 块中，确保无论提交成功还是失败，`isSubmitting` 状态最终都会被重置为 `false`。</span><br></pre></td></tr></table></figure><p>通过上述代码，我们定义了手机号和密码的输入框，并配置了相应的验证规则。<code>uni-forms</code> 组件负责管理整个表单的状态和验证逻辑，而 <code>uni-easyinput</code> 则提供了便捷的输入和校验展示功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp跨平台开发指南</title>
      <link href="/2025/04/20/uniapp%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
      <url>/2025/04/20/uniapp%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一、uniapp核心特性"><a href="#一、uniapp核心特性" class="headerlink" title="一、uniapp核心特性"></a>一、uniapp核心特性</h2><p>✅ 基于Vue.js开发体系<br>✅ 一次开发多端部署<br>✅ 支持原生插件扩展<br>✅ 丰富的API和组件库</p><h2 id="二、跨平台开发优势"><a href="#二、跨平台开发优势" class="headerlink" title="二、跨平台开发优势"></a>二、跨平台开发优势</h2><ol><li><strong>多端覆盖</strong>：同时生成iOS&#x2F;Android App、H5、微信&#x2F;支付宝小程序</li><li><strong>统一技术栈</strong>：使用Vue语法+小程序规范开发</li><li><strong>性能优化</strong>：通过weex原生渲染提升体验</li><li><strong>开发效率</strong>：代码复用率可达90%以上</li></ol><h2 id="三、典型应用场景"><a href="#三、典型应用场景" class="headerlink" title="三、典型应用场景"></a>三、典型应用场景</h2><ul><li>企业级跨平台应用</li><li>快速原型验证</li><li>小程序矩阵开发</li><li>现有H5应用原生化</li></ul><h2 id="四、最佳实践建议"><a href="#四、最佳实践建议" class="headerlink" title="四、最佳实践建议"></a>四、最佳实践建议</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件编译示例</span></span><br><span class="line"><span class="comment">// #ifdef MP-WEIXIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微信小程序环境&#x27;</span>);</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用uniapp路由</span></span><br><span class="line">uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/pages/detail/detail&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>开发注意事项</strong>：</p><ul><li>使用rpx替代px实现响应式布局</li><li>合理使用条件编译处理平台差异</li><li>注意小程序包体积限制（2MB）</li><li>优先使用uniapp内置组件</li></ul><h2 id="三、开发环境搭建"><a href="#三、开发环境搭建" class="headerlink" title="三、开发环境搭建"></a>三、开发环境搭建</h2><h3 id="1-必要工具安装"><a href="#1-必要工具安装" class="headerlink" title="1. 必要工具安装"></a>1. 必要工具安装</h3><ul><li>HBuilderX 3.6+（官方IDE）</li><li>Node.js 16.x LTS</li><li>各端开发工具：微信开发者工具&#x2F;Android Studio&#x2F;Xcode</li></ul><h3 id="2-项目初始化"><a href="#2-项目初始化" class="headerlink" title="2. 项目初始化"></a>2. 项目初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建uni-app项目</span></span><br><span class="line">npx degit dcloudio/uni-preset-vue#vite my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> my-project &amp;&amp; npm install</span><br></pre></td></tr></table></figure><h3 id="3-关键配置项"><a href="#3-关键配置项" class="headerlink" title="3. 关键配置项"></a>3. 关键配置项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// manifest.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;MyApp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;__UNI__XXXXX&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;跨平台应用&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vueVersion&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、项目结构规范"><a href="#四、项目结构规范" class="headerlink" title="四、项目结构规范"></a>四、项目结构规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   │   ├── index.vue</span><br><span class="line">│   │   └── components</span><br><span class="line">├── static</span><br><span class="line">│   ├── logos</span><br><span class="line">├── uni_modules</span><br><span class="line">├── App.vue</span><br><span class="line">└── main.js</span><br></pre></td></tr></table></figure><h2 id="五、多端适配实战"><a href="#五、多端适配实战" class="headerlink" title="五、多端适配实战"></a>五、多端适配实战</h2><h3 id="1-平台样式适配"><a href="#1-平台样式适配" class="headerlink" title="1. 平台样式适配"></a>1. 平台样式适配</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 条件编译示例 */</span></span><br><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">height</span>: <span class="number">88px</span>; &#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">height</span>: <span class="number">48</span>rpx; &#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h3 id="2-接口差异化处理"><a href="#2-接口差异化处理" class="headerlink" title="2. 接口差异化处理"></a>2. 接口差异化处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">  <span class="keyword">return</span> plus.<span class="property">net</span>.<span class="title function_">request</span>(url)</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// #ifdef H5</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、性能优化专项"><a href="#六、性能优化专项" class="headerlink" title="六、性能优化专项"></a>六、性能优化专项</h2><h3 id="1-启动速度优化"><a href="#1-启动速度优化" class="headerlink" title="1. 启动速度优化"></a>1. 启动速度优化</h3><ul><li>启用v3编译模式</li><li>分包加载配置</li><li>静态资源CDN化</li></ul><h3 id="2-包体积控制"><a href="#2-包体积控制" class="headerlink" title="2. 包体积控制"></a>2. 包体积控制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">optimization</span></span><br><span class="line">      .<span class="title function_">minimize</span>(<span class="literal">true</span>)</span><br><span class="line">      .<span class="title function_">splitChunks</span>(&#123; <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、混合开发指南"><a href="#七、混合开发指南" class="headerlink" title="七、混合开发指南"></a>七、混合开发指南</h2><h3 id="1-原生插件集成"><a href="#1-原生插件集成" class="headerlink" title="1. 原生插件集成"></a>1. 原生插件集成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android原生模块示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestModule</span> <span class="keyword">extends</span> <span class="title class_">UniModule</span> &#123;</span><br><span class="line">  <span class="meta">@UniJSMethod</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    Toast.makeText(getContext(), msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、常见问题排查"><a href="#八、常见问题排查" class="headerlink" title="八、常见问题排查"></a>八、常见问题排查</h2><table><thead><tr><th>问题现象</th><th>解决方案</th></tr></thead><tbody><tr><td>白屏问题</td><td>检查v3编译模式是否开启</td></tr><tr><td>样式错乱</td><td>检查rpx单位使用情况</td></tr><tr><td>API无效</td><td>确认平台兼容性</td></tr></tbody></table><h2 id="九、调试与发布"><a href="#九、调试与发布" class="headerlink" title="九、调试与发布"></a>九、调试与发布</h2><ol><li>使用HBuilderX内置模拟器</li><li>真机调试功能</li><li>云打包服务</li><li>自动化构建流水线</li></ol><blockquote><p>官方文档：<a href="https://uniapp.dcloud.net.cn/">uniapp.dcloud.net.cn</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
